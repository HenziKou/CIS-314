# Execution begins at address 0 
   .pos 0
   irmovq Stack, %rsp	# Set up stack pointer
   call Main		# Execute Main program
   halt			# Terminate program

# Array of 10 elements
   .align 8
array:
   .quad 0x000000000003
   .quad 0x00000000000a
   .quad 0x000000000002
   .quad 0x000000000008
   .quad 0x000000000004
   .quad 0x000000000005
   .quad 0x000000000007
   .quad 0x000000000001
   .quad 0x000000000006
   .quad 0x000000000009

# int Main()
Main:
   irmovq array, %rdi	# array in %rdi
   irmovq $10, %rsi	# constant 10 in %rsi
   call Sort		# call Sort(array, 10)
   ret			# return

# void Sort(long *array, long 10)
Sort:
   rrmovq %rdi, %rdx	# *i = array[i]
   rrmovq %rdi, %rcx	# *j = array[j]
   irmovq $1, %r8	# index incrementer = 1
   irmovq $8, %r9	# pointer incrementer by 1 byte
   irmovq $0, %r10	# i = 0
   rrmovq %rsi, %r11	# %r11 = 10
   isubq $1, %r11	# %r11 -= 1
   subq %r10, %r11	# compare 9 - i
   jle End		# if <= 0 goto End

OLoop:
   rrmovq %rsi, %r11	# reset %r11 = 10
   rrmovq %rdx, %r12	# min_value = array[i]
   rrmovq %r10, %r13	# j = i
   addq %r8, %r13	# j = i + 1
   subq %r13, %r11	# compare 10 - j
   jle End		# if <= 0 goto End

ILoop:
   rrmovq %rsi, %r11	# reset %r11 = 10
   addq %r9, %rcx	# *j = array[i + 1]
   rrmovq %rcx, %r14	# %r14 = array[j]
   mrmovq (%r12), %rbx	# %rbx = *min_value
   mrmovq (%r14), %rax	# %rax = *j
   subq %rbx, %rax	# compare %rax hold value to min_value
   addq %r8, %r13	# j++
   subq %r13, %r11	# compare 10 - j
   jge ILoop		# if >= goto ILoop
   call Swap		# call Swap(%rax hold value, min_value)
   addq %r8, %r10	# i++
   addq %r9, %rdx	# increment *i by 1 byte
   rrmovq %rdx, %rcx	# reset *j pointer
   rrmovq %rsi, %r11	# reset %r11 = 10
   subq %r10, %r11	# compare 10 - i
   jge OLoop		# if >= goto OLoop

# void Swap(long *xp, long *yp)
Swap:
   mrmovq (%r12), %rax	# min_value = *t0
   mrmovq (%rdx), %rbx	# i_value = *t1
   rmmovq %rax, (%rdx)	# *t1 = min_value
   rmmovq %rbx, (%r12)	# *t0 - i_value
   ret

End:
   ret
# Stack starts here and grows to lower addresses
   .pos 0x200
Stack:



